AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AI Pipeline Analytics Dashboard - Simple Version without S3'

# ============================================================================
# GLOBAL CONFIGURATION
# ============================================================================

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Handler: app.lambda_handler
    Environment:
      Variables:
        PIPELINE_LOG_TABLE: !Ref PipelineLogTable

# ============================================================================
# DATA STORAGE  
# ============================================================================

Resources:
  # Enhanced DynamoDB Table for Pipeline Logs
  PipelineLogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-PipelineLogs"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: execution_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: date
          AttributeType: S
        - AttributeName: hour
          AttributeType: S
      KeySchema:
        - AttributeName: execution_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: date-index
          KeySchema:
            - AttributeName: date
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: hour-index
          KeySchema:
            - AttributeName: hour
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # ============================================================================
  # LAMBDA FUNCTIONS
  # ============================================================================

  # Input Analyzer Function
  InputAnalyzerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-input-analyzer"
      CodeUri: pipeline/input_analyzer/
      Description: "Analyzes user input complexity and requirements"
      MemorySize: 256

  # Response Enhancer Function
  ResponseEnhancerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-response-enhancer"
      CodeUri: pipeline/response_enhancer/
      Description: "Enhances AI responses based on analysis"
      MemorySize: 512

  # Pipeline Logger Function
  PipelineLoggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-pipeline-logger"
      CodeUri: pipeline/pipeline_logger/
      Description: "Logs pipeline execution data"
      MemorySize: 256
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref PipelineLogTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: '*'

  # Analytics Dashboard API Function
  AnalyticsDashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-analytics-api"
      CodeUri: analytics/
      Description: "Analytics API for pipeline data"
      MemorySize: 512
      Timeout: 30
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PipelineLogTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PipelineApi
            Path: /analytics
            Method: GET

  # Pipeline Trigger Function
  PipelineTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-pipeline-trigger"
      CodeUri: pipeline/
      Handler: trigger.lambda_handler
      Description: "Triggers the AI Pipeline workflow"
      MemorySize: 256
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref AIPipelineStateMachine
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !Ref AIPipelineStateMachine
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PipelineApi
            Path: /trigger
            Method: POST

  # ============================================================================
  # API GATEWAY
  # ============================================================================

  # REST API Gateway
  PipelineApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      StageName: Prod
      Description: "AI Pipeline API Gateway"
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      GatewayResponses:
        DEFAULT_4xx:
          ResponseTemplates:
            "application/json": '{"message":"Not Found"}'
        DEFAULT_5xx:
          ResponseTemplates:
            "application/json": '{"message":"Internal Server Error"}'

  # ============================================================================
  # STEP FUNCTIONS WORKFLOW
  # ============================================================================

  # Step Functions State Machine
  AIPipelineStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-AIPipeline"
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "AI Pipeline with Input Analysis and Response Enhancement",
          "StartAt": "InputAnalysis",
          "States": {
            "InputAnalysis": {
              "Type": "Task",
              "Resource": "${InputAnalyzerFunction.Arn}",
              "ResultPath": "$.analysis",
              "Next": "ResponseEnhancement",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "LogError",
                  "ResultPath": "$.error"
                }
              ]
            },
            "ResponseEnhancement": {
              "Type": "Task", 
              "Resource": "${ResponseEnhancerFunction.Arn}",
              "ResultPath": "$.enhanced_response",
              "Next": "LogSuccess",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "LogError",
                  "ResultPath": "$.error"
                }
              ]
            },
            "LogSuccess": {
              "Type": "Task",
              "Resource": "${PipelineLoggerFunction.Arn}",
              "End": true
            },
            "LogError": {
              "Type": "Task",
              "Resource": "${PipelineLoggerFunction.Arn}",
              "End": true
            }
          }
        }

  # Step Functions Execution Role
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt InputAnalyzerFunction.Arn
                  - !GetAtt ResponseEnhancerFunction.Arn
                  - !GetAtt PipelineLoggerFunction.Arn

  # ============================================================================
  # MONITORING AND ALERTING
  # ============================================================================

  # SNS Topic for Alerts
  PipelineAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-pipeline-alerts"
      DisplayName: !Sub "${AWS::StackName} AI Pipeline Alerts"

  # CloudWatch Alarms
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-high-error-rate"
      AlarmDescription: "High error rate in AI Pipeline"
      MetricName: ErrorRate
      Namespace: AWS/StepFunctions
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref PipelineAlertsTopic
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref AIPipelineStateMachine

  LongExecutionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-long-execution"
      AlarmDescription: "Long execution time in AI Pipeline"
      MetricName: ExecutionTime
      Namespace: AWS/StepFunctions
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 30000
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref PipelineAlertsTopic
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref AIPipelineStateMachine

  # CloudWatch Dashboard
  PipelineDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${AWS::StackName}-analytics"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AIPipeline", "ExecutionCount", "Complexity", "high" ],
                  [ ".", ".", ".", "medium" ],
                  [ ".", ".", ".", "low" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Executions by Complexity",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AIPipeline", "ProcessingTime", "Complexity", "high" ],
                  [ ".", ".", ".", "medium" ],
                  [ ".", ".", ".", "low" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Processing Time by Complexity",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AIPipeline", "SuccessfulExecutions" ],
                  [ ".", "FailedExecutions" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Success vs Error Rate",
                "period": 300
              }
            }
          ]
        }

# ============================================================================
# OUTPUTS
# ============================================================================

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${PipelineApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  AnalyticsApiUrl:
    Description: "Analytics API endpoint URL"
    Value: !Sub "https://${PipelineApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/analytics"
    Export:
      Name: !Sub "${AWS::StackName}-AnalyticsUrl"

  TriggerApiUrl:
    Description: "Pipeline Trigger API endpoint URL"
    Value: !Sub "https://${PipelineApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/trigger"
    Export:
      Name: !Sub "${AWS::StackName}-TriggerUrl"

  PipelineLogTableName:
    Description: "DynamoDB table name for pipeline logs"
    Value: !Ref PipelineLogTable
    Export:
      Name: !Sub "${AWS::StackName}-TableName"

  StepFunctionArn:
    Description: "Step Functions state machine ARN"
    Value: !Ref AIPipelineStateMachine
    Export:
      Name: !Sub "${AWS::StackName}-StateMachineArn"

  CloudWatchDashboardUrl:
    Description: "CloudWatch Dashboard URL"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${AWS::StackName}-analytics"
    Export:
      Name: !Sub "${AWS::StackName}-DashboardUrl"